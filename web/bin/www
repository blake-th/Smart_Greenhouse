#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('web:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/* READ LINE */

var readline = require('readline');

var rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false
});

//const UPDATE_INTERVAL = 1000;
//var temperature = 32;
//var moisture = 900;
//var luminance = 60;

rl.on('line', function (line) {
    var [T, t, M, m, L, l] = line.split(' ');    
    console.log(T, ':', parseFloat(t), 'M:', parseFloat(m), 'L:', parseFloat(l));
    app.get_sensor_value(parseFloat(t), parseFloat(m), parseFloat(l));
    //temperature = t;
    //moisture = m;
    //luminance = l;
});

/*
setInterval(function() {
  app.get_sensor_value(temperature, moisture, luminance);
}, UPDATE_INTERVAL);
*/

/* READ LINE */




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
